"""Init

Revision ID: ec53fbf9f9e6
Revises: 
Create Date: 2024-06-25 23:22:10.900240

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "ec53fbf9f9e6"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade function to create tables for subscriptions and towns in the
    database.

    This function creates three tables: subscriptions, towns, and
    subscriptions_towns_association. The subscriptions table stores
    information about subscriptions, including telegram_id, chat_id,
    subscription status, and first time status. The towns table stores
    information about towns. The subscriptions_towns_association table
    associates subscriptions with towns.
    """

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "subscriptions",
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("chat_id", sa.BigInteger(), nullable=False),
        sa.Column("is_subscribed", sa.Boolean(), nullable=True, default=False),
        sa.Column("is_first_time", sa.Boolean(), nullable=True, default=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "towns",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("town", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "subscriptions_towns_association",
        sa.Column("subscription_id", sa.Integer(), nullable=False),
        sa.Column("town_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["subscription_id"],
            ["subscriptions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["town_id"],
            ["towns.id"],
        ),
        sa.PrimaryKeyConstraint("subscription_id", "town_id", "id"),
        sa.UniqueConstraint(
            "subscription_id", "town_id", name="idx_unique_subscription_town"
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade the database by dropping tables related to subscriptions and
    towns.

    This function drops the tables 'subscriptions_towns_association',
    'towns', and 'subscriptions' from the database as part of a downgrade
    operation.
    """

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("subscriptions_towns_association")
    op.drop_table("towns")
    op.drop_table("subscriptions")
    # ### end Alembic commands ###
